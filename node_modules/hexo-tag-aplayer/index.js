'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
* hexo-tag-aplayer
* https://github.com/grzhan/hexo-tag-aplayer
* Copyright (c) 2016, grzhan
* Licensed under the MIT license.
*
* Syntax:
*  {% aplayer title author url [picture_url, narrow, autoplay] %}
*/
require('babel-polyfill');
var fs = require('hexo-fs'),
    util = require('hexo-util'),
    path = require('path'),
    request = require('sync-request'),
    counter = 0,
    srcDir = path.dirname(require.resolve('aplayer')),
    scriptDir = 'assets/js/',
    aplayerScript = 'APlayer.min.js',
    registers = [[aplayerScript, scriptDir + aplayerScript, path.join(srcDir, aplayerScript)]];

registers.forEach(function (register) {
	var _register = _slicedToArray(register, 3),
	    regName = _register[0],
	    path = _register[1],
	    srcPath = _register[2];

	hexo.extend.generator.register(regName, function () {
		return {
			path: path,
			data: function data() {
				return fs.createReadStream(srcPath);
			}
		};
	});
});

hexo.extend.filter.register('after_post_render', function (data) {
	data.content = util.htmlTag('script', { src: '/' + scriptDir + aplayerScript }, ' ') + data.content;
	return data;
});

// {% aplayer title author url [picture_url, narrow, autoplay] %}
hexo.extend.tag.register('aplayer', function (args) {
	var _args = _slicedToArray(args, 3),
	    title = _args[0],
	    author = _args[1],
	    url = _args[2],
	    lrcPath = '',
	    narrow = false,
	    autoplay = false,
	    lrcOpt = false,
	    width = '',
	    pic = args[3] && args[3] !== 'narrow' && args[3] !== 'autoplay' && !args[3].includes('lrc:') && !args[3].includes('width:') ? args[3] : '',
	    id = 'aplayer' + counter++,
	    raw = '',
	    content = '';
	// Parse optional arguments


	if (args.length > 3) {
		var options = args.slice(3);
		narrow = options.includes('narrow');
		autoplay = options.includes('autoplay');
		for (var i = 0; i < options.length; i++) {
			var option = options[i];
			lrcOpt = option.indexOf('lrc:') == 0 ? true : lrcOpt;
			lrcPath = option.indexOf('lrc:') == 0 ? option.slice(option.indexOf(':') + 1) : lrcPath;
			width = option.indexOf('width:') == 0 ? option + ';' : width;
		}
	}
	width = narrow ? '' : width;
	raw = '<div id="' + id + '" class="aplayer" style="margin-bottom: 20px;' + width + '">';
	if (lrcOpt) {
		// Generate lyric texts
		if (lrcPath.indexOf('http:') == 0 || lrcPath.indexOf('https:') == 0) {
			content = request('GET', lrcPath).getBody();
		} else {
			var PostAsset = hexo.database._models.PostAsset;
			var _path = path.join(hexo.base_dir, PostAsset.findOne({ post: this._id, slug: lrcPath })._id);
			content = fs.readFileSync(_path);
		}
		raw += '<pre class="aplayer-lrc-content">' + content + '</pre>';
	}
	raw += '</div>\n\t\t<script>\n\t\t\tnew APlayer({\n\t\t\t\telement: document.getElementById("' + id + '"),\n\t\t\t\tnarrow: ' + narrow + ',\n\t\t\t\tautoplay: ' + autoplay + ',\n\t\t\t\tshowlrc: ' + (lrcOpt ? '2' : '0') + ',\n\t\t\t\tmusic: {\n\t\t\t\t\ttitle: "' + title + '",\n\t\t\t\t\tauthor: "' + author + '",\n\t\t\t\t\turl: "' + url + '",\n\t\t\t\t\tpic: "' + pic + '",\n\t\t\t\t}\n\t\t\t});\n\t\t</script>';
	return raw;
});

// {% aplayerlrc "title" "author" "url" "autoplay" %} [00:00.00]lrc here {% endaplayerlrc %}
hexo.extend.tag.register('aplayerlrc', function (args, content) {
	var _args2 = _slicedToArray(args, 3),
	    title = _args2[0],
	    author = _args2[1],
	    url = _args2[2],
	    narrow = false,
	    autoplay = false,
	    pic = args[3] && args[3] !== 'narrow' && args[3] !== 'autoplay' && !args[3].includes('lrc:') && !args[3].includes('width:') ? args[3] : '',
	    id = 'aplayer' + counter++,
	    raw = '',
	    width = '';

	if (args.length > 3) {
		var options = args.slice(3);
		narrow = options.includes('narrow');
		autoplay = options.indexOf('autoplay');
		for (var i = 0; i < options.length; i++) {
			var option = options[i];
			width = option.indexOf('width:') == 0 ? option + ';' : width;
		}
	}
	width = narrow ? '' : width;
	raw = '<div id="' + id + '" class="aplayer" style="margin-bottom: 20px;' + width + '">\n\t\t\t\t<pre class="aplayer-lrc-content">\'' + content + '</pre>\n\t\t\t</div>\n\t\t\t<script>\n\t\t\t\tnew APlayer({\n\t\t\t\t\telement: document.getElementById("' + id + '"),\n\t\t\t\t\tnarrow: ' + narrow + ',\n\t\t\t\t\tautoplay: ' + autoplay + ',\n\t\t\t\t\tshowlrc: 2,\n\t\t\t\t\tmusic: {\n\t\t\t\t\t\ttitle: "' + title + '",\n\t\t\t\t\t\tauthor: "' + author + '",\n\t\t\t\t\t\turl: "' + url + '",\n\t\t\t\t\t\tpic: "' + pic + '",\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t</script>';
	return raw;
}, { ends: true });

// {% aplayerlist %} {options} {% endaplayerlist %}
hexo.extend.tag.register('aplayerlist', function (args, content) {
	try {
		var options = JSON.parse(content);
		var id = 'aplayer' + counter++;
		var defaultOptions = {
			narrow: false,
			autoplay: false,
			showlrc: 0
		};
		var resultOptions = Object.assign({}, defaultOptions, options);
		var raw = '\n\t\t\t<div id="' + id + '" class="aplayer" style="margin-bottom: 20px;"></div>\n\t\t\t<script>\n\t\t\t\tvar options = ' + JSON.stringify(resultOptions) + ';\n\t\t\t\toptions.element = document.getElementById("' + id + '");\n\t\t\t\tnew APlayer(options);\n\t\t\t</script>\n\n\t\t';
		return raw;
	} catch (e) {
		console.error(e);
		return '\n\t\t\t<script>\n\t\t\t\tconsole.error("' + e + '");\n\t\t\t</script>';
	}
}, { ends: true });
